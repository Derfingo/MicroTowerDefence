//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Input/Input Action Maps.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActionMaps: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActionMaps()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input Action Maps"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""46c9d953-8998-4039-be1d-3a97471dc910"",
            ""actions"": [
                {
                    ""name"": ""Zoom Camera"",
                    ""type"": ""PassThrough"",
                    ""id"": ""a9c2c66d-d37e-4eff-a4f4-53a214874a5c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Mouse Position"",
                    ""type"": ""Value"",
                    ""id"": ""265a05ea-fa21-410d-b394-53278af5ef3d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Select Content"",
                    ""type"": ""Button"",
                    ""id"": ""c43de571-4fea-4b7a-91b2-b4fe7f114de5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate Camera"",
                    ""type"": ""Button"",
                    ""id"": ""945f7059-3b28-4984-94de-d905f81e626c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Turn Camera Left"",
                    ""type"": ""Button"",
                    ""id"": ""87963ce6-f1f9-4ca1-9085-d66806080bf6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Turn Camera Right"",
                    ""type"": ""Button"",
                    ""id"": ""d2453d83-5f9c-4f56-880e-53da4056dbfd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Build Content"",
                    ""type"": ""Button"",
                    ""id"": ""b93c354a-f21f-48d4-b9ca-352114587f16"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""42e58f7c-86cd-4f00-8c90-fb75074ca238"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": ""NormalizeVector2"",
                    ""groups"": ""Player"",
                    ""action"": ""Zoom Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5f875800-a374-443e-af3c-76629d5e8d08"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ce97aa85-37b7-4c8f-81c8-b5b4ca83e88f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Content"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ac9e98c3-7e45-41c2-8f17-786d6f8617fa"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""021a789a-da4a-4c10-83ec-60635cc2f2b9"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn Camera Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9bcdafc4-1a75-42ca-9913-5c27e6a8be02"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn Camera Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d0742c97-3a6b-4ed5-8b4d-58f4eb021074"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Build Content"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""cfe6abb0-a18a-4eb9-822d-aaaab20ef365"",
            ""actions"": [
                {
                    ""name"": ""Pause Game"",
                    ""type"": ""Button"",
                    ""id"": ""b1391dc3-aeb4-437f-baad-7e3711491fea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""aa670353-e59d-4e37-955a-2fcd31077ca4"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause Game"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6ef03474-c39d-4620-bb99-4d998f1d0137"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause Game"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""510a2e3d-758a-40b2-8c3f-517110b8a2e4"",
                    ""path"": ""<DualSenseGamepadHID>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause Game"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Player"",
            ""bindingGroup"": ""Player"",
            ""devices"": []
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_ZoomCamera = m_Player.FindAction("Zoom Camera", throwIfNotFound: true);
        m_Player_MousePosition = m_Player.FindAction("Mouse Position", throwIfNotFound: true);
        m_Player_SelectContent = m_Player.FindAction("Select Content", throwIfNotFound: true);
        m_Player_RotateCamera = m_Player.FindAction("Rotate Camera", throwIfNotFound: true);
        m_Player_TurnCameraLeft = m_Player.FindAction("Turn Camera Left", throwIfNotFound: true);
        m_Player_TurnCameraRight = m_Player.FindAction("Turn Camera Right", throwIfNotFound: true);
        m_Player_BuildContent = m_Player.FindAction("Build Content", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_PauseGame = m_UI.FindAction("Pause Game", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_ZoomCamera;
    private readonly InputAction m_Player_MousePosition;
    private readonly InputAction m_Player_SelectContent;
    private readonly InputAction m_Player_RotateCamera;
    private readonly InputAction m_Player_TurnCameraLeft;
    private readonly InputAction m_Player_TurnCameraRight;
    private readonly InputAction m_Player_BuildContent;
    public struct PlayerActions
    {
        private @InputActionMaps m_Wrapper;
        public PlayerActions(@InputActionMaps wrapper) { m_Wrapper = wrapper; }
        public InputAction @ZoomCamera => m_Wrapper.m_Player_ZoomCamera;
        public InputAction @MousePosition => m_Wrapper.m_Player_MousePosition;
        public InputAction @SelectContent => m_Wrapper.m_Player_SelectContent;
        public InputAction @RotateCamera => m_Wrapper.m_Player_RotateCamera;
        public InputAction @TurnCameraLeft => m_Wrapper.m_Player_TurnCameraLeft;
        public InputAction @TurnCameraRight => m_Wrapper.m_Player_TurnCameraRight;
        public InputAction @BuildContent => m_Wrapper.m_Player_BuildContent;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @ZoomCamera.started += instance.OnZoomCamera;
            @ZoomCamera.performed += instance.OnZoomCamera;
            @ZoomCamera.canceled += instance.OnZoomCamera;
            @MousePosition.started += instance.OnMousePosition;
            @MousePosition.performed += instance.OnMousePosition;
            @MousePosition.canceled += instance.OnMousePosition;
            @SelectContent.started += instance.OnSelectContent;
            @SelectContent.performed += instance.OnSelectContent;
            @SelectContent.canceled += instance.OnSelectContent;
            @RotateCamera.started += instance.OnRotateCamera;
            @RotateCamera.performed += instance.OnRotateCamera;
            @RotateCamera.canceled += instance.OnRotateCamera;
            @TurnCameraLeft.started += instance.OnTurnCameraLeft;
            @TurnCameraLeft.performed += instance.OnTurnCameraLeft;
            @TurnCameraLeft.canceled += instance.OnTurnCameraLeft;
            @TurnCameraRight.started += instance.OnTurnCameraRight;
            @TurnCameraRight.performed += instance.OnTurnCameraRight;
            @TurnCameraRight.canceled += instance.OnTurnCameraRight;
            @BuildContent.started += instance.OnBuildContent;
            @BuildContent.performed += instance.OnBuildContent;
            @BuildContent.canceled += instance.OnBuildContent;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @ZoomCamera.started -= instance.OnZoomCamera;
            @ZoomCamera.performed -= instance.OnZoomCamera;
            @ZoomCamera.canceled -= instance.OnZoomCamera;
            @MousePosition.started -= instance.OnMousePosition;
            @MousePosition.performed -= instance.OnMousePosition;
            @MousePosition.canceled -= instance.OnMousePosition;
            @SelectContent.started -= instance.OnSelectContent;
            @SelectContent.performed -= instance.OnSelectContent;
            @SelectContent.canceled -= instance.OnSelectContent;
            @RotateCamera.started -= instance.OnRotateCamera;
            @RotateCamera.performed -= instance.OnRotateCamera;
            @RotateCamera.canceled -= instance.OnRotateCamera;
            @TurnCameraLeft.started -= instance.OnTurnCameraLeft;
            @TurnCameraLeft.performed -= instance.OnTurnCameraLeft;
            @TurnCameraLeft.canceled -= instance.OnTurnCameraLeft;
            @TurnCameraRight.started -= instance.OnTurnCameraRight;
            @TurnCameraRight.performed -= instance.OnTurnCameraRight;
            @TurnCameraRight.canceled -= instance.OnTurnCameraRight;
            @BuildContent.started -= instance.OnBuildContent;
            @BuildContent.performed -= instance.OnBuildContent;
            @BuildContent.canceled -= instance.OnBuildContent;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_PauseGame;
    public struct UIActions
    {
        private @InputActionMaps m_Wrapper;
        public UIActions(@InputActionMaps wrapper) { m_Wrapper = wrapper; }
        public InputAction @PauseGame => m_Wrapper.m_UI_PauseGame;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @PauseGame.started += instance.OnPauseGame;
            @PauseGame.performed += instance.OnPauseGame;
            @PauseGame.canceled += instance.OnPauseGame;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @PauseGame.started -= instance.OnPauseGame;
            @PauseGame.performed -= instance.OnPauseGame;
            @PauseGame.canceled -= instance.OnPauseGame;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);
    private int m_PlayerSchemeIndex = -1;
    public InputControlScheme PlayerScheme
    {
        get
        {
            if (m_PlayerSchemeIndex == -1) m_PlayerSchemeIndex = asset.FindControlSchemeIndex("Player");
            return asset.controlSchemes[m_PlayerSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnZoomCamera(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
        void OnSelectContent(InputAction.CallbackContext context);
        void OnRotateCamera(InputAction.CallbackContext context);
        void OnTurnCameraLeft(InputAction.CallbackContext context);
        void OnTurnCameraRight(InputAction.CallbackContext context);
        void OnBuildContent(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnPauseGame(InputAction.CallbackContext context);
    }
}
